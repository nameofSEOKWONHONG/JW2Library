@page "/fetchdata"
@using WeatherForecastService
@inject GrpcChannel Channel
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null) {
    <p>
        <em>Loading...</em>
    </p>
}
else {
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts) {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecastData[] forecasts;

    protected override async Task OnInitializedAsync() {
    // The port number(5001) must match the port of the gRPC server.
        var client = new WeatherForecastor.WeatherForecastorClient(Channel);
        var reply = await client.GetWeatherForecastAsync(new WeatherForecastRequest {Id = 2003});
        Console.WriteLine("Id: " + reply.Id);
        Console.WriteLine("Date: " + reply.Date);
        Console.WriteLine("TemperatureC: " + reply.TemperatureC);
        Console.WriteLine("TemperatureF: " + reply.TemperatureF);
        forecasts = await Http.GetFromJsonAsync<WeatherForecastData[]>("sample-data/weather.json");
    }

    public class WeatherForecastData {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int) (TemperatureC / 0.5556);
    }

}